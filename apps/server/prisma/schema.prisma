// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

enum Categories {
  Food
  Bussiness
  Arts
  Music
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  username       String   @unique
  password       String
  email          String   @unique
  emailConfirmed Boolean  @default(false)
  role           Role     @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ConfirmToken ConfirmToken[]
  Order        Order[]
  badges       Badge[]
  events       Event[]
  feedbacks    Feedback[]
  feedbackId   Int?
  Ticket       Ticket[]
  wallet       Wallet?
}

model ConfirmToken {
  id          Int      @id @default(autoincrement())
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      Int

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id      Int @id @default(autoincrement())
  userId  Int
  eventId Int

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Ticket {
  id      String @id @default(uuid())
  User    User?  @relation(fields: [userId], references: [id])
  userId  Int?
  Event   Event? @relation(fields: [eventId], references: [id])
  eventId Int?
}

model Event {
  id         Int        @id @default(autoincrement())
  title      String
  desc       String
  slug       String
  location   String
  categories Categories
  image      String
  upcoming   Boolean    @default(false)
  price      Int
  date       DateTime

  Order    Order[]
  Feedback Feedback[]
  tickets  Ticket[]
  User     User?      @relation(fields: [userId], references: [id])
  userId   Int?
  Voucher  Voucher[]
}

model Categoriess {
  id       Int        @id @default(autoincrement())
  name     Categories
  preview  String
  imageURL String
}

model Feedback {
  id Int @id @default(autoincrement())

  title       String
  comments    String
  ratings     Int
  suggestions String
  userId      Int
  eventId     Int

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Badge {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  users User[]
}

model Wallet {
  id      Int  @id @default(autoincrement())
  balance Int  @default(0)
  userId  Int  @unique
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions Transaction[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  walletId  Int
  amount    Float
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Voucher {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  discountRate Int
  stock        Int      @default(10)
  eventId      Int
  expiredDate  DateTime

  Event Event @relation(fields: [eventId], references: [id])
}


