// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

enum Role {
  USER
  ORGANIZER
  ADMIN
}

enum categories {
  Food
  Bussiness
  Arts
  Hobbies
}

model User {
  id             Int      @id @default(autoincrement())
  name           String
  username       String   @unique
  password       String
  email          String   @unique
  emailConfirmed Boolean  @default(false)
  role           Role     @default(USER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  ConfirmToken ConfirmToken[]
  Order        Order[]
  badges       Badge[]
  events       Event[]
  feedback     Feedback[]
}

model ConfirmToken {
  id          Int      @id @default(autoincrement())
  token       String
  expiredDate DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
  userId      Int

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id      Int @id @default(autoincrement())
  userId  Int
  eventId Int

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Event {
  id         Int        @id @default(autoincrement())
  title      String
  desc       String
  categories categories
  upcoming   Boolean

  Order    Order[]
  Feedback Feedback[]
  User     User?      @relation(fields: [userId], references: [id])
  userId   Int?
}

model Categories {
  id       Int        @id @default(autoincrement())
  name     categories
  preview  String
  imageURL String
}

model Feedback {
  id          Int    @id @default(autoincrement())
  comments    String
  ratings     String
  suggestions String
  userId      Int
  eventId     Int

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Badge {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  users       User[]
}

// model Leaderboard {
// }
